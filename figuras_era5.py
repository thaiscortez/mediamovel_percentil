# -*- coding: utf-8 -*-
"""PLOTA_FIGURAS_ERA5_Mestrado.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dBl4NsK9KadPO9wdk_nYEaQW8n_C7egj

#**PLOTA FIGURAS DO ERA5 23,24,25 e 26 DE JANEIRO DE 2020**

NESSE SCRIPT:

*   PLOTA FIGURA DO CAPE
*   PLOTA FIGURA DO CISALHAMENTO DO VENTO
*   PLOTA FIGURA DE JATOS + DIVERGENCIA + PNMM + ESPESSURA
*   PLOTA FIGURA DE AGUA PRECIPITÁVEL + LINHAS DE CORRENTE
*   PLOTA FIGURA DE CONVERGÊNCIA + VETORES DO VENTO + OMEGA NEGATIVO

Thaís Cortez

#**INSTALAÇÃO DAS BIBLIOTECAS**
"""

# Instação cartopy e proplot:
!pip install proplot

!pip uninstall shapely --yes
!pip install shapely cartopy==0.21.1 --no-binary shapely --no-binary cartopy
!wget https://raw.githubusercontent.com/SciTools/cartopy/master/tools/cartopy_feature_download.py
!python cartopy_feature_download.py physical

# Intalando pacote para mascarar shapefile
!pip install salem
!pip install geopandas
!pip install pyproj
!pip install rasterio

#!apt-get install -q libgeos-3.5.0
#!apt-get install -q libgeos-dev
#!pip install -q https://github.com/matplotlib/basemap/archive/master.zip
#!pip install -q pyproj==1.9.6
#!pip install -q permetrics
# Instalando o cartopy (usado para gerar Mapas)
#!apt-get install - qlibproj-dev proj-data proj-bin
#!apt-get install -q libgeos-dev
#!pip install -q --no-binary shapely shapely --force

#!pip install xarray

!pip install mygrads
!pip install matplotlib-venn
!apt-get -qq install -y libfluidsynth1
!pip install wrf-python

"""# **Download de informações auxiliares**

"""

# Baixa paleta de cores
!wget -c https://www.dropbox.com/s/t7b8x2i3gnsq8gv/cpt_convert.py

# Baixando os arquivos de shapefile dos estados do Sudeste
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/MG/mg_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/ES/es_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RJ/rj_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/SP/sp_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/BA/ba_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/AC/ac_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/AL/al_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/AM/am_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/AP/ap_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/CE/ce_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/DF/df_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/GO/go_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/MA/ma_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/MT/mt_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/MS/ms_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PA/pa_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PB/pb_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PR/pr_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PE/pe_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PI/pi_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RR/rr_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RO/ro_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RN/rn_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RS/rs_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/SC/sc_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/SE/se_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/TO/to_unidades_da_federacao.zip

!unzip -o /content/mg_unidades_da_federacao.zip
!unzip -o /content/es_unidades_da_federacao.zip
!unzip -o /content/rj_unidades_da_federacao.zip
!unzip -o /content/sp_unidades_da_federacao.zip
!unzip -o /content/ba_unidades_da_federacao.zip
!unzip -o /content/ac_unidades_da_federacao.zip
!unzip -o /content/al_unidades_da_federacao.zip
!unzip -o /content/ap_unidades_da_federacao.zip
!unzip -o /content/am_unidades_da_federacao.zip
!unzip -o /content/ce_unidades_da_federacao.zip
!unzip -o /content/df_unidades_da_federacao.zip
!unzip -o /content/go_unidades_da_federacao.zip
!unzip -o /content/ma_unidades_da_federacao.zip
!unzip -o /content/mt_unidades_da_federacao.zip
!unzip -o /content/ms_unidades_da_federacao.zip
!unzip -o /content/pa_unidades_da_federacao.zip
!unzip -o /content/pb_unidades_da_federacao.zip
!unzip -o /content/pr_unidades_da_federacao.zip
!unzip -o /content/pe_unidades_da_federacao.zip
!unzip -o /content/pi_unidades_da_federacao.zip
!unzip -o /content/rr_unidades_da_federacao.zip
!unzip -o /content/ro_unidades_da_federacao.zip
!unzip -o /content/rn_unidades_da_federacao.zip
!unzip -o /content/rs_unidades_da_federacao.zip
!unzip -o /content/sc_unidades_da_federacao.zip
!unzip -o /content/se_unidades_da_federacao.zip
!unzip -o /content/to_unidades_da_federacao.zip

"""#**IMPORTA AS BIBLIOTECAS**"""

##############################################
import matplotlib.pyplot as plt
import matplotlib
matplotlib.rcParams.update({'font.size':22})
from matplotlib import pyplot as plt
#from cpt_convert import loadCPT # Importando a função CPT convert
#from matplotlib.colors import LinearSegmentedColormap # interpolação linear para as cores dos mapas
##############################################
#import proplot as plot
#import cartopy.crs as ccrs
#import cartopy.io.shapereader as shpreader
##############################################
import numpy as np
import glob
##############################################
#import salem
import xarray as xr
import pandas as pd
##############################################
import warnings
warnings.filterwarnings('ignore')
##############################################
import numpy as np
import plotly.figure_factory as ff
##############################################
#import mygrads as mg
# acessando o drive
from google.colab import drive
drive.mount('/content/drive', force_remount=False)
##############################################

import proplot
from proplot.internals.rcsetup import LINEWIDTH
import cartopy.io.shapereader as shpreader
import cartopy.crs as ccrs

from wrf import (to_np, getvar,smooth2d, get_cartopy, cartopy_xlim,cartopy_ylim,latlon_coords)

import salem
import warnings
warnings.filterwarnings("ignore")

"""# **Caminho dos dados no Drive**


"""

path = f'/content/drive/MyDrive/mestrado/Dados/ERA5/'
#shape = f'/content/drive/MyDrive/TFG/Dados/era5/RMBH/'

"""#**Plotando o contorno dos estados**"""

#-----------------------------------------------------------------------------------
# Função que plota por Estado
#-----------------------------------------------------------------------------------
def evm_plot_by_state():
    shapefile = list(shpreader.Reader('/content/AC_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/AL_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/AP_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/AM_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/CE_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/DF_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/GO_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/MA_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/MT_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/MS_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PA_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PB_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PR_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PE_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PI_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/RR_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/RO_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/RN_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/RS_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/SC_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/SE_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/TO_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/ES_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/MG_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=1.7)
    shapefile = list(shpreader.Reader('/content/RJ_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/SP_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/BA_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=1.7)

#-----------------------------------------------------------------------------------
# Função que plota os Estados
#-----------------------------------------------------------------------------------
def evm_plot_states(shapefile, cor):

    """
    Retorna a plotagem dos contornos de um shapefile na figura

    Parâmetros de entrada:
                shapefile (shp): shapefile da regiao

    Parâmetros de saída:
                figura com o contorno da região baseado no shapefile fornecido
    """
    import cartopy.crs as ccrs
    import cartopy.io.shapereader as shpreader
    import matplotlib.pyplot as plt

    shapefile = list(shpreader.Reader(shapefile).geometries())
    ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor=cor,facecolor='none', linewidth=1.0)

"""#**Seleciona os limites da região de interesse**"""

latN = 5
latS = -30
lonW = -75
lonE = -30

"""#**Abre todos os Arquivos (*.NC)**"""

superficie = xr.open_dataset(f'{path}superficie.nc')
niveis = xr.open_dataset(f'{path}niveis.nc')
nivel = xr.open_dataset(f'{path}nivel.nc')
uv1000 = xr.open_dataset(f'{path}uv1000.nc')
superficie

"""#**Convergencia + vetores de vento + omega negativo**"""

#escolhendo os dados
#CONVERGENCIA
c = niveis.d[3,1,:,:]
c = c*10000
c=smooth2d(c,5,cenweight=4)
c1 = niveis.d[7,1,:,:]
c1 = c1*10000
c1 =smooth2d(c1,5,cenweight=4)
c2 = niveis.d[11,1,:,:]
c2 = c2*10000
c2 =smooth2d(c2,5,cenweight=4)
c3 = niveis.d[15,1,:,:]
c3 = c3*10000
c3 =smooth2d(c3,5,cenweight=4)

# Plotando a figura de convergencia+vetores de vento+omega negativo
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), proj='pcarree', hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################

#FIGURA 1

ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])

#OMEGA NEGATIVO
map1 = ax[0].contourf(niveis.longitude, niveis.latitude, niveis.w[0,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#CONVERGENCIA
# Define the countour interval
#min = -4
#max = -0.9
#intervalo = 0.5
#n = np.arange(min, max, intervalo)

#plot the contours
#img3 = ax[0].contour(nivel.longitude, nivel.latitude, c, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
#ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')


# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False])

#OMEGA NEGATIVO
map2 = ax[1].contourf(niveis.longitude, niveis.latitude, niveis.w[1,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#CONVERGENCIA
#plot the contours
#img3 = ax[1].contour(nivel.longitude, nivel.latitude, c1, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
#ax[1].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[2].contourf(niveis.longitude, niveis.latitude, niveis.w[2,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#CONVERGENCIA
#plot the contours
#img3 = ax[2].contour(nivel.longitude, nivel.latitude, c2, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
#ax[2].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])

#OMEGA NEGATIVO
map2 = ax[3].contourf(niveis.longitude, niveis.latitude, niveis.w[3,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#CONVERGENCIA
#plot the contours
#img3 = ax[3].contour(nivel.longitude, nivel.latitude, c3, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
#ax[3].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map1,
                       loc='b', label='Omega negativo (500 hPa) $Pa. s^{-1}$', pad=-2)

fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/omega.png', dpi=300)


"""#**PLOTA CISALHAMENTO**"""

#ESCOLHENDO OS DADOS
#cisalhamento
cisalhamento = np.sqrt(niveis.u[3,3,:,:]**2 + niveis.v[3,3,:,:]**2)-np.sqrt(uv1000.u[3,:,:]**2 + uv1000.v[3,:,:]**2)
cisalhamento_1 = np.sqrt(niveis.u[7,3,:,:]**2 + niveis.v[7,3,:,:]**2)-np.sqrt(uv1000.u[7,:,:]**2 + uv1000.v[7,:,:]**2)
cisalhamento_2 = np.sqrt(niveis.u[11,3,:,:]**2 + niveis.v[11,3,:,:]**2)-np.sqrt(uv1000.u[11,:,:]**2 + uv1000.v[11,:,:]**2)
cisalhamento_3 = np.sqrt(niveis.u[15,3,:,:]**2 + niveis.v[15,3,:,:]**2)-np.sqrt(uv1000.u[15,:,:]**2 + uv1000.v[15,:,:]**2)

# Plotando a figura do Cisalhamento

matplotlib.rcParams.update({'font.size':22})
fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2.5)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

##################################################################################
#CISALHAMENTO
ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])
map1 = ax[0].contourf(cisalhamento.longitude, cisalhamento.latitude, cisalhamento.values,
                  cmap='BuGn', vmax=28, vmin=0, extend='both')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-24 06:00 UTC', abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False] )
map2 = ax[1].contourf(cisalhamento_1.longitude, cisalhamento_1.latitude, cisalhamento_1,vmax=28, vmin=0,
                      cmap='BuGn',extend='both')
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[2].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])
map3 = ax[3].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map3,
                       loc='b', label='Cisalhamento do vento (500-1000 hPa) $ms^{-1}$',extend='both')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cisalhamento.png', dpi=300)


"""#**Plota escoamento e agua precipitavel**"""

#agua precipitavel
aguaprec=superficie['tcwv']

#VENTO
vel = ((niveis.u[3,7,:,:]**2)+(niveis.v[3,7,:,:]**2))**0.5
vel2 = ((niveis.u[7,7,:,:]**2)+(niveis.v[7,7,:,:]**2))**0.5
vel3 = ((niveis.u[11,7,:,:]**2)+(niveis.v[11,7,:,:]**2))**0.5
vel4 = ((niveis.u[15,7,:,:]**2)+(niveis.v[15,7,:,:]**2))**0.5

u=niveis.u[3,7,:,:]
v=niveis.v[3,7,:,:]
u2=niveis.u[7,7,:,:]
v2=niveis.v[7,7,:,:]
u3=niveis.u[11,7,:,:]
v3=niveis.v[11,7,:,:]
u4=niveis.u[15,7,:,:]
v4=niveis.v[15,7,:,:]

# Plotando a figura de agua precipitavel + escoamento
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################

#FIGURA 1

ax[0].format(title='2021-12-23 18:00 UTC', abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])

#AGUA PRECIPITAVEL
map1 = ax[0].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[3,:,:],
                   cmap='navy', vmax=100, vmin=40, extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[0].streamplot(vel.longitude.values, vel.latitude.values, u.values, v.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------

#FIGURA 2
ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False])

#AGUA PRECIPITAVEL
map2 = ax[1].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[7,:,:],vmax=100, vmin=40,
                      cmap='navy',extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[1].streamplot(vel2.longitude.values, vel2.latitude.values, u2.values, v2.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------

#FIGURA 3
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[2].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[11,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[2].streamplot(vel3.longitude.values, vel3.latitude.values, u3.values, v3.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------

#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])

#AGUA PRECIPITAVEL
map3 = ax[3].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[15,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[3].streamplot(vel4.longitude.values, vel4.latitude.values, u4.values, v4.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#barra de cores shaded
cbar3 = fig.colorbar(map3,
                       loc='b', label='Água precipitável $Kgm^{-2}$ ')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/aguaprec.png', dpi=300)


"""#**PNMM + ESPESSURA + JATOS + DIVERGENCIA**"""

#ESCOLHENDO OS DADOS
#VENTO
vel=((niveis.u[3,1,:,:]**2)+(niveis.v[3,1,:,:]**2))**0.5
vel2 = ((niveis.u[7,1,:,:]**2)+(niveis.v[7,1,:,:]**2))**0.5
vel3 = ((niveis.u[11,1,:,:]**2)+(niveis.v[11,1,:,:]**2))**0.5
vel4 = ((niveis.u[15,1,:,:]**2)+(niveis.v[15,1,:,:]**2))**0.5

#PRESSÃO
pnmm=superficie.msl[3,:,:]/100
pnmm2=superficie.msl[7,:,:]/100
pnmm3=superficie.msl[11,:,:]/100
pnmm4=superficie.msl[15,:,:]/100

#ESPESSURA
espessura= (((niveis.z[3,3,:,:])-(nivel.z[3,:,:]))/9.8)
espessura2= (((niveis.z[7,3,:,:])-(nivel.z[7,:,:]))/9.8)
espessura3= (((niveis.z[11,3,:,:])-(nivel.z[11,:,:]))/9.8)
espessura4= (((niveis.z[15,3,:,:])-(nivel.z[15,:,:]))/9.8)

#DIVERGENCIA
d = niveis.d[3,1,:,:]
d = d*10000
d=smooth2d(d,5,cenweight=4)
d1 = niveis.d[7,1,:,:]
d1 = d1*10000
d1 =smooth2d(d1,5,cenweight=4)
d2 = niveis.d[11,1,:,:]
d2 = d2*10000
d2 =smooth2d(d2,5,cenweight=4)
d3 = niveis.d[15,1,:,:]
d3 = d2*10000
d3 =smooth2d(d2,5,cenweight=4)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = proplot.subplots(nrows=2, ncols=2, figsize=(12, 12), tight=True, proj='pcarree')
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################
#FIGURA 1
ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=28, labels = [True, False, False, False] )

#JATOS EM 250
map1 = ax[0].contourf(vel.longitude, vel.latitude, vel.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[0].streamplot(vel.longitude.values, vel.latitude.values, u.values, v.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

################################################################################
#FIGURA 2
ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=28, labels = [False, False, False, False])

#JATOS EM 250
map1 = ax[1].contourf(vel2.longitude, vel2.latitude, vel2.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#linhas de corrente
img3 = ax[1].streamplot(vel2.longitude.values, vel2.latitude.values, u2.values, v2.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

################################################################################
#FIGURA 3
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=28)
#JATOS EM 250
map2 = ax[2].contourf(vel3.longitude, vel3.latitude, vel3.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#linhas de corrente
img3 = ax[2].streamplot(vel3.longitude.values, vel3.latitude.values, u3.values, v3.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

################################################################################
#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=28, labels = [False, False, True, False])
#JATOS EM 250
map2 = ax[3].contourf(vel4.longitude, vel4.latitude, vel4.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#linhas de corrente
img3 = ax[3].streamplot(vel4.longitude.values, vel4.latitude.values, u4.values, v4.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()

#barra de cores shaded
cbar3 = fig.colorbar(map2, pad=2, loc='b', label='Jatos 250 hPa ($m s^{-1}$)')
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/jatos_linhas.png', dpi=300)

#fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/jatoss.png', dpi=300)


######################################################
from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = proplot.subplots(nrows=2,ncols=2, figsize=(12,12), proj='pcarree', hspace = 2.5)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################
#FIGURA 1

#ESPESSURA
# Define de contour interval
data_min = 5200
data_max = 5900
interval = 50
levels = np.arange(data_min,data_max,interval)

ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])
img2 = ax[0].contourf(espessura.longitude, espessura.latitude, espessura.values, cmap='gist_heat_r', extend='both',levels=levels)
ax[0].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 2
ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False])
img2 = ax[1].contourf(espessura3.longitude, espessura3.latitude, espessura3.values, cmap='gist_heat_r',extend='both', levels=levels)
ax[1].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 3
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img2 = ax[2].contourf(espessura2.longitude, espessura2.latitude, espessura2.values, cmap='gist_heat_r', extend='both',levels=levels)
ax[2].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])
img2 = ax[3].contourf(espessura4.longitude, espessura4.latitude, espessura4.values, cmap='gist_heat_r',extend='both', levels=levels)
ax[3].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')


# plota contornos dos Estados
evm_plot_by_state()

#barra de cores shaded
cbar3 = fig.colorbar(img2, pad=2, loc='b', label='Espessura 500-1000 hPa')

fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/espessura_colorida.png', dpi=300)
