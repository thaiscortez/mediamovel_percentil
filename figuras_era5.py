# -*- coding: utf-8 -*-
"""PLOTA_FIGURAS_ERA5_Mestrado.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dBl4NsK9KadPO9wdk_nYEaQW8n_C7egj

#**PLOTA FIGURAS DO ERA5 23,24,25 e 26 DE JANEIRO DE 2020**

NESSE SCRIPT:

*   PLOTA FIGURA DO CAPE
*   PLOTA FIGURA DO CISALHAMENTO DO VENTO
*   PLOTA FIGURA DE JATOS + DIVERGENCIA + PNMM + ESPESSURA
*   PLOTA FIGURA DE AGUA PRECIPITÁVEL + LINHAS DE CORRENTE
*   PLOTA FIGURA DE CONVERGÊNCIA + VETORES DO VENTO + OMEGA NEGATIVO

Thaís Cortez

#**INSTALAÇÃO DAS BIBLIOTECAS**
"""

# Instação cartopy e proplot:
!pip install proplot

!pip uninstall shapely --yes
!pip install shapely cartopy==0.21.1 --no-binary shapely --no-binary cartopy
!wget https://raw.githubusercontent.com/SciTools/cartopy/master/tools/cartopy_feature_download.py
!python cartopy_feature_download.py physical

# Intalando pacote para mascarar shapefile
!pip install salem
!pip install geopandas
!pip install pyproj
!pip install rasterio

#!apt-get install -q libgeos-3.5.0
#!apt-get install -q libgeos-dev
#!pip install -q https://github.com/matplotlib/basemap/archive/master.zip
#!pip install -q pyproj==1.9.6
#!pip install -q permetrics
# Instalando o cartopy (usado para gerar Mapas)
#!apt-get install - qlibproj-dev proj-data proj-bin
#!apt-get install -q libgeos-dev
#!pip install -q --no-binary shapely shapely --force

#!pip install xarray

!pip install mygrads
!pip install matplotlib-venn
!apt-get -qq install -y libfluidsynth1
!pip install wrf-python

"""# **Download de informações auxiliares**

"""

# Baixa paleta de cores
!wget -c https://www.dropbox.com/s/t7b8x2i3gnsq8gv/cpt_convert.py

# Baixando os arquivos de shapefile dos estados do Sudeste
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/MG/mg_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/ES/es_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RJ/rj_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/SP/sp_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/BA/ba_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/AC/ac_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/AL/al_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/AM/am_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/AP/ap_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/CE/ce_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/DF/df_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/GO/go_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/MA/ma_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/MT/mt_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/MS/ms_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PA/pa_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PB/pb_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PR/pr_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PE/pe_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/PI/pi_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RR/rr_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RO/ro_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RN/rn_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/RS/rs_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/SC/sc_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/SE/se_unidades_da_federacao.zip
!wget -q -c https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2019/UFs/TO/to_unidades_da_federacao.zip

!unzip -o /content/mg_unidades_da_federacao.zip
!unzip -o /content/es_unidades_da_federacao.zip
!unzip -o /content/rj_unidades_da_federacao.zip
!unzip -o /content/sp_unidades_da_federacao.zip
!unzip -o /content/ba_unidades_da_federacao.zip
!unzip -o /content/ac_unidades_da_federacao.zip
!unzip -o /content/al_unidades_da_federacao.zip
!unzip -o /content/ap_unidades_da_federacao.zip
!unzip -o /content/am_unidades_da_federacao.zip
!unzip -o /content/ce_unidades_da_federacao.zip
!unzip -o /content/df_unidades_da_federacao.zip
!unzip -o /content/go_unidades_da_federacao.zip
!unzip -o /content/ma_unidades_da_federacao.zip
!unzip -o /content/mt_unidades_da_federacao.zip
!unzip -o /content/ms_unidades_da_federacao.zip
!unzip -o /content/pa_unidades_da_federacao.zip
!unzip -o /content/pb_unidades_da_federacao.zip
!unzip -o /content/pr_unidades_da_federacao.zip
!unzip -o /content/pe_unidades_da_federacao.zip
!unzip -o /content/pi_unidades_da_federacao.zip
!unzip -o /content/rr_unidades_da_federacao.zip
!unzip -o /content/ro_unidades_da_federacao.zip
!unzip -o /content/rn_unidades_da_federacao.zip
!unzip -o /content/rs_unidades_da_federacao.zip
!unzip -o /content/sc_unidades_da_federacao.zip
!unzip -o /content/se_unidades_da_federacao.zip
!unzip -o /content/to_unidades_da_federacao.zip

"""#**IMPORTA AS BIBLIOTECAS**"""

##############################################
import matplotlib.pyplot as plt
import matplotlib
matplotlib.rcParams.update({'font.size':22})
from matplotlib import pyplot as plt
#from cpt_convert import loadCPT # Importando a função CPT convert
#from matplotlib.colors import LinearSegmentedColormap # interpolação linear para as cores dos mapas
##############################################
#import proplot as plot
#import cartopy.crs as ccrs
#import cartopy.io.shapereader as shpreader
##############################################
import numpy as np
import glob
##############################################
#import salem
import xarray as xr
import pandas as pd
##############################################
import warnings
warnings.filterwarnings('ignore')
##############################################
import numpy as np
import plotly.figure_factory as ff
##############################################
#import mygrads as mg
# acessando o drive
from google.colab import drive
drive.mount('/content/drive', force_remount=False)
##############################################

import proplot
from proplot.internals.rcsetup import LINEWIDTH
import cartopy.io.shapereader as shpreader
import cartopy.crs as ccrs

from wrf import (to_np, getvar,smooth2d, get_cartopy, cartopy_xlim,cartopy_ylim,latlon_coords)

import salem
import warnings
warnings.filterwarnings("ignore")

"""# **Caminho dos dados no Drive**


"""

path = f'/content/drive/MyDrive/mestrado/Dados/ERA5/'
#shape = f'/content/drive/MyDrive/TFG/Dados/era5/RMBH/'

"""#**Plotando o contorno dos estados**"""

#-----------------------------------------------------------------------------------
# Função que plota por Estado
#-----------------------------------------------------------------------------------
def evm_plot_by_state():
    shapefile = list(shpreader.Reader('/content/AC_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/AL_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/AP_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/AM_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/CE_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/DF_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/GO_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/MA_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/MT_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/MS_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PA_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PB_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PR_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PE_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/PI_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/RR_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/RO_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/RN_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/RS_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/SC_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/SE_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/TO_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/ES_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/MG_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=1.7)
    shapefile = list(shpreader.Reader('/content/RJ_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/SP_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=0.5)
    shapefile = list(shpreader.Reader('/content/BA_UF_2019.shp').geometries()) ; ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor='black',facecolor='none', linewidth=1.7)

#-----------------------------------------------------------------------------------
# Função que plota os Estados
#-----------------------------------------------------------------------------------
def evm_plot_states(shapefile, cor):

    """
    Retorna a plotagem dos contornos de um shapefile na figura

    Parâmetros de entrada:
                shapefile (shp): shapefile da regiao

    Parâmetros de saída:
                figura com o contorno da região baseado no shapefile fornecido
    """
    import cartopy.crs as ccrs
    import cartopy.io.shapereader as shpreader
    import matplotlib.pyplot as plt

    shapefile = list(shpreader.Reader(shapefile).geometries())
    ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor=cor,facecolor='none', linewidth=1.0)

"""#**Seleciona os limites da região de interesse**"""

latN = 5
latS = -30
lonW = -75
lonE = -30

"""#**Abre todos os Arquivos (*.NC)**"""

superficie = xr.open_dataset(f'{path}superficie.nc')
niveis = xr.open_dataset(f'{path}niveis.nc')
nivel = xr.open_dataset(f'{path}nivel.nc')
uv1000 = xr.open_dataset(f'{path}uv1000.nc')
superficie

"""#**Convergencia + vetores de vento + omega negativo**"""

#escolhendo os dados
#CONVERGENCIA
c = niveis.d[3,1,:,:]
c = c*10000
c=smooth2d(c,5,cenweight=4)
c1 = niveis.d[7,1,:,:]
c1 = c1*10000
c1 =smooth2d(c1,5,cenweight=4)
c2 = niveis.d[11,1,:,:]
c2 = c2*10000
c2 =smooth2d(c2,5,cenweight=4)
c3 = niveis.d[15,1,:,:]
c3 = c3*10000
c3 =smooth2d(c3,5,cenweight=4)

# Plotando a figura de convergencia+vetores de vento+omega negativo
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), proj='pcarree', hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################

#FIGURA 1

ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])

#OMEGA NEGATIVO
map1 = ax[0].contourf(niveis.longitude, niveis.latitude, niveis.w[0,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#CONVERGENCIA
# Define the countour interval
#min = -4
#max = -0.9
#intervalo = 0.5
#n = np.arange(min, max, intervalo)

#plot the contours
#img3 = ax[0].contour(nivel.longitude, nivel.latitude, c, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
#ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')


# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False])

#OMEGA NEGATIVO
map2 = ax[1].contourf(niveis.longitude, niveis.latitude, niveis.w[1,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#CONVERGENCIA
#plot the contours
#img3 = ax[1].contour(nivel.longitude, nivel.latitude, c1, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
#ax[1].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[2].contourf(niveis.longitude, niveis.latitude, niveis.w[2,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#CONVERGENCIA
#plot the contours
#img3 = ax[2].contour(nivel.longitude, nivel.latitude, c2, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
#ax[2].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])

#OMEGA NEGATIVO
map2 = ax[3].contourf(niveis.longitude, niveis.latitude, niveis.w[3,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#CONVERGENCIA
#plot the contours
#img3 = ax[3].contour(nivel.longitude, nivel.latitude, c3, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
#ax[3].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map1,
                       loc='b', label='Omega negativo (500 hPa) $Pa. s^{-1}$', pad=-2)

fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/omega.png', dpi=300)

#escolhendo os dados
u=niveis.u[0,7,:,:]
v=niveis.v[0,7,:,:]
u1=niveis.u[1,7,:,:]
v1=niveis.v[1,7,:,:]
u2=niveis.u[2,7,:,:]
v2=niveis.v[2,7,:,:]
u3=niveis.u[3,7,:,:]
v3=niveis.v[3,7,:,:]
#velocidade do vento
vel = np.sqrt(u**2 + v**2)
vel1 = np.sqrt(u1**2 + v1**2)
vel2 = np.sqrt(u2**2 + v2**2)
vel3 = np.sqrt(u3**2 + v3**2)

#---------------------------
#CONVERGENCIA
c = niveis.d[0,1,:,:]
c = c*10000
c=smooth2d(c,5,cenweight=4)
c1 = niveis.d[1,1,:,:]
c1 = c1*10000
c1 =smooth2d(c1,5,cenweight=4)
c2 = niveis.d[2,1,:,:]
c2 = c2*10000
c2 =smooth2d(c2,5,cenweight=4)
c3 = niveis.d[3,1,:,:]
c3 = c2*10000
c3 =smooth2d(c3,5,cenweight=4)

# Plotando a figura de convergencia+vetores de vento+omega negativo
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree', hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=3, lonlines=3,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################

#FIGURA 1

ax[0].format(title='2021-12-23 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map1 = ax[0].contourf(niveis.longitude, niveis.latitude, niveis.w[0,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[0].quiver(nivel.longitude, nivel.latitude, u, v, scale_units='width', width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[0].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
# Define the countour interval
min = -4
max = -0.9
intervalo = 0.5
n = np.arange(min, max, intervalo)

#plot the contours
img3 = ax[0].contour(nivel.longitude, nivel.latitude, c, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')


# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-23 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[1].contourf(niveis.longitude, niveis.latitude, niveis.w[1,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[1].quiver(nivel.longitude, nivel.latitude, u1, v1, scale_units='width', width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[1].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[1].contour(nivel.longitude, nivel.latitude, c1, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[1].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-23 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[2].contourf(niveis.longitude, niveis.latitude, niveis.w[2,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[2].quiver(nivel.longitude, nivel.latitude, u2, v2, scale_units='width', width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[2].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[2].contour(nivel.longitude, nivel.latitude, c2, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[2].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[3].contourf(niveis.longitude, niveis.latitude, niveis.w[3,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[3].quiver(nivel.longitude, nivel.latitude, u2, v2, scale_units='width', width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[3].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[3].contour(nivel.longitude, nivel.latitude, c3, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[3].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map1,
                       loc='b', label='Omega negativo (500 hPa) $Pa. s^{-1}$', pad=-2)

fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/omega1.png', dpi=300)

#escolhendo os dados
u=niveis.u[4,7,:,:]
v=niveis.v[4,7,:,:]
u1=niveis.u[5,7,:,:]
v1=niveis.v[5,7,:,:]
u2=niveis.u[6,7,:,:]
v2=niveis.v[6,7,:,:]
u3=niveis.u[7,7,:,:]
v3=niveis.v[7,7,:,:]
#velocidade do vento
vel = np.sqrt(u**2 + v**2)
vel1 = np.sqrt(u1**2 + v1**2)
vel2 = np.sqrt(u2**2 + v2**2)
vel3 = np.sqrt(u3**2 + v3**2)

#---------------------------
#CONVERGENCIA
c = niveis.d[4,1,:,:]
c = c*10000
c=smooth2d(c,5,cenweight=4)
c1 = niveis.d[5,1,:,:]
c1 = c1*10000
c1 =smooth2d(c1,5,cenweight=4)
c2 = niveis.d[6,1,:,:]
c2 = c2*10000
c2 =smooth2d(c2,5,cenweight=4)
c3 = niveis.d[7,1,:,:]
c3 = c2*10000
c3 =smooth2d(c3,5,cenweight=4)

# Plotando a figura de convergencia+vetores de vento+omega negativo

matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree', hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=3, lonlines=3,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################

#FIGURA 1

ax[0].format(title='2021-12-24 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map1 = ax[0].contourf(niveis.longitude, niveis.latitude, niveis.w[4,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[0].quiver(vel.longitude, vel.latitude, u, v, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[0].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
# Define the countour interval
min = -4
max = -0.9
intervalo = 0.5
n = np.arange(min, max, intervalo)

#plot the contours
img3 = ax[0].contour(niveis.longitude, niveis.latitude, c, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')


# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-24 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[1].contourf(niveis.longitude, niveis.latitude, niveis.w[5,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[1].quiver(vel2.longitude, vel2.latitude, u1, v1, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[1].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[1].contour(niveis.longitude, niveis.latitude, c1, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[1].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-24 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[2].contourf(niveis.longitude, niveis.latitude, niveis.w[6,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[2].quiver(vel3.longitude, vel3.latitude, u2, v2, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[2].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[2].contour(niveis.longitude, niveis.latitude, c2, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[2].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[3].contourf(niveis.longitude, niveis.latitude, niveis.w[7,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[3].quiver(vel3.longitude, vel3.latitude, u2, v2, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[3].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[3].contour(niveis.longitude, niveis.latitude, c3, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[3].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map1,
                       loc='b', label='Omega negativo (500 hPa) $Pa. s^{-1}$', pad=-2)

fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/omega2.png', dpi=300)

#escolhendo os dados
u=niveis.u[8,7,:,:]
v=niveis.v[8,7,:,:]
u1=niveis.u[9,7,:,:]
v1=niveis.v[9,7,:,:]
u2=niveis.u[10,7,:,:]
v2=niveis.v[10,7,:,:]
u3=niveis.u[11,7,:,:]
v3=niveis.v[11,7,:,:]
#velocidade do vento
vel = np.sqrt(u**2 + v**2)
vel1 = np.sqrt(u1**2 + v1**2)
vel2 = np.sqrt(u2**2 + v2**2)
vel3 = np.sqrt(u3**2 + v3**2)

#---------------------------
#CONVERGENCIA
c = niveis.d[8,1,:,:]
c = c*10000
c=smooth2d(c,5,cenweight=4)
c1 = niveis.d[9,1,:,:]
c1 = c1*10000
c1 =smooth2d(c1,5,cenweight=4)
c2 = niveis.d[10,1,:,:]
c2 = c2*10000
c2 =smooth2d(c2,5,cenweight=4)
c3 = niveis.d[11,1,:,:]
c3 = c2*10000
c3 =smooth2d(c3,5,cenweight=4)

# Plotando a figura de convergencia+vetores de vento+omega negativo
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree', hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=3, lonlines=3,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################

#FIGURA 1

ax[0].format(title='2021-12-25 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map1 = ax[0].contourf(niveis.longitude, niveis.latitude, niveis.w[8,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[0].quiver(vel.longitude, vel.latitude, u, v, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[0].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
# Define the countour interval
min = -4
max = -0.9
intervalo = 0.5
n = np.arange(min, max, intervalo)

#plot the contours
img3 = ax[0].contour(niveis.longitude, niveis.latitude, c, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')


# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-25 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[1].contourf(niveis.longitude, niveis.latitude, niveis.w[9,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[1].quiver(vel2.longitude, vel2.latitude, u1, v1, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[1].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[1].contour(niveis.longitude, niveis.latitude, c1, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[1].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-24 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[2].contourf(niveis.longitude, niveis.latitude, niveis.w[10,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[2].quiver(vel3.longitude, vel3.latitude, u2, v2, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[2].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[2].contour(niveis.longitude, niveis.latitude, c2, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[2].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[3].contourf(niveis.longitude, niveis.latitude, niveis.w[11,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[3].quiver(vel3.longitude, vel3.latitude, u2, v2, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[3].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[3].contour(niveis.longitude, niveis.latitude, c3, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[3].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map1,
                       loc='b', label='Omega negativo (500 hPa) $Pa. s^{-1}$', pad=-2)

fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/omega3.png', dpi=300)

#escolhendo os dados
u=niveis.u[12,7,:,:]
v=niveis.v[12,7,:,:]
u1=niveis.u[13,7,:,:]
v1=niveis.v[13,7,:,:]
u2=niveis.u[14,7,:,:]
v2=niveis.v[14,7,:,:]
u3=niveis.u[15,7,:,:]
v3=niveis.v[15,7,:,:]
#velocidade do vento
vel = np.sqrt(u**2 + v**2)
vel1 = np.sqrt(u1**2 + v1**2)
vel2 = np.sqrt(u2**2 + v2**2)
vel3 = np.sqrt(u3**2 + v3**2)

#---------------------------
#CONVERGENCIA
c = niveis.d[12,1,:,:]
c = c*10000
c=smooth2d(c,5,cenweight=4)
c1 = niveis.d[13,1,:,:]
c1 = c1*10000
c1 =smooth2d(c1,5,cenweight=4)
c2 = niveis.d[14,1,:,:]
c2 = c2*10000
c2 =smooth2d(c2,5,cenweight=4)
c3 = niveis.d[15,1,:,:]
c3 = c2*10000
c3 =smooth2d(c3,5,cenweight=4)

# Plotando a figura de convergencia+vetores de vento+omega negativo
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree', hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=3, lonlines=3,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################

#FIGURA 1

ax[0].format(title='2021-12-26 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map1 = ax[0].contourf(niveis.longitude, niveis.latitude, niveis.w[12,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[0].quiver(vel.longitude, vel.latitude, u, v, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[0].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
# Define the countour interval
min = -4
max = -0.9
intervalo = 0.5
n = np.arange(min, max, intervalo)

#plot the contours
img3 = ax[0].contour(niveis.longitude, niveis.latitude, c, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')


# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-26 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[1].contourf(niveis.longitude, niveis.latitude, niveis.w[13,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[1].quiver(vel2.longitude, vel2.latitude, u1, v1, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[1].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[1].contour(niveis.longitude, niveis.latitude, c1, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[1].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-26 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[2].contourf(niveis.longitude, niveis.latitude, niveis.w[14,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[2].quiver(vel3.longitude, vel3.latitude, u2, v2, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[2].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[2].contour(niveis.longitude, niveis.latitude, c2, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[2].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#OMEGA NEGATIVO
map2 = ax[3].contourf(niveis.longitude, niveis.latitude, niveis.w[15,3,:,:],
                   cmap='davos', vmax=-2.5, vmin=0, lx=0.25, extend='both')

#VETORES DO VENTO
img3 = ax[3].quiver(vel3.longitude, vel3.latitude, u2, v2, scale_units='width',  width=0.0006, scale=1/0.0007999, minshaft=2, headwidth=8, transform=ccrs.PlateCarree())
qk = ax[3].quiverkey(img3, 0.9, 0.92, 1, '20 kt', labelpos='E', coordinates='figure')

#CONVERGENCIA
#plot the contours
img3 = ax[3].contour(niveis.longitude, niveis.latitude, c3, cmap='yellow', linestyles='solid', linewidths=2.0, levels=n)
ax[3].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='yellow')

# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map1,
                       loc='b', label='Omega negativo (500 hPa) $Pa. s^{-1}$', pad=-2)

fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/omega4.png', dpi=300)

"""#**PLOTA CISALHAMENTO**



"""

#ESCOLHENDO OS DADOS
#cisalhamento
cisalhamento = np.sqrt(niveis.u[3,3,:,:]**2 + niveis.v[3,3,:,:]**2)-np.sqrt(uv1000.u[3,:,:]**2 + uv1000.v[3,:,:]**2)
cisalhamento_1 = np.sqrt(niveis.u[7,3,:,:]**2 + niveis.v[7,3,:,:]**2)-np.sqrt(uv1000.u[7,:,:]**2 + uv1000.v[7,:,:]**2)
cisalhamento_2 = np.sqrt(niveis.u[11,3,:,:]**2 + niveis.v[11,3,:,:]**2)-np.sqrt(uv1000.u[11,:,:]**2 + uv1000.v[11,:,:]**2)
cisalhamento_3 = np.sqrt(niveis.u[15,3,:,:]**2 + niveis.v[15,3,:,:]**2)-np.sqrt(uv1000.u[15,:,:]**2 + uv1000.v[15,:,:]**2)

# Plotando a figura do Cisalhamento

matplotlib.rcParams.update({'font.size':22})
fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2.5)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

##################################################################################
#CISALHAMENTO
ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])
map1 = ax[0].contourf(cisalhamento.longitude, cisalhamento.latitude, cisalhamento.values,
                  cmap='BuGn', vmax=28, vmin=0, extend='both')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-24 06:00 UTC', abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False] )
map2 = ax[1].contourf(cisalhamento_1.longitude, cisalhamento_1.latitude, cisalhamento_1,vmax=28, vmin=0,
                      cmap='BuGn',extend='both')
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[2].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])
map3 = ax[3].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map3,
                       loc='b', label='Cisalhamento do vento (500-1000 hPa) $ms^{-1}$',extend='both')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cisalhamento.png', dpi=300)

#ESCOLHENDO OS DADOS
#cisalhamento
cisalhamento = np.sqrt(niveis.u[0,3,:,:]**2 + niveis.v[0,3,:,:]**2)-np.sqrt(uv1000.u[0,:,:]**2 + uv1000.v[0,:,:]**2)
cisalhamento_1 = np.sqrt(niveis.u[1,3,:,:]**2 + niveis.v[1,3,:,:]**2)-np.sqrt(uv1000.u[1,:,:]**2 + uv1000.v[1,:,:]**2)
cisalhamento_2 = np.sqrt(niveis.u[2,3,:,:]**2 + niveis.v[2,3,:,:]**2)-np.sqrt(uv1000.u[2,:,:]**2 + uv1000.v[2,:,:]**2)
cisalhamento_3 = np.sqrt(niveis.u[3,3,:,:]**2 + niveis.v[3,3,:,:]**2)-np.sqrt(uv1000.u[3,:,:]**2 + uv1000.v[3,:,:]**2)

# Plotando a figura do Cisalhamento

matplotlib.rcParams.update({'font.size':22})
fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2.5)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=3, lonlines=3,
          latlim=(latN, latS), lonlim=(lonW, lonE))

##################################################################################
#CISALHAMENTO
ax[0].format(title='2021-12-23 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map1 = ax[0].contourf(cisalhamento.longitude, cisalhamento.latitude, cisalhamento.values,
                  cmap='BuGn', vmax=28, vmin=0, extend='both')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-23 06:00 UTC', abc=True, abcstyle='a)', abcsize=20 )
map2 = ax[1].contourf(cisalhamento_1.longitude, cisalhamento_1.latitude, cisalhamento_1,vmax=28, vmin=0,
                      cmap='BuGn',extend='both')
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-23 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[2].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[3].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map3,
                       loc='b', label='Cisalhamento do vento (500-1000 hPa) $ms^{-1}$',extend='both')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cisalhamento.png', dpi=300)

#ESCOLHENDO OS DADOS
#cisalhamento
cisalhamento = np.sqrt(niveis.u[4,3,:,:]**2 + niveis.v[4,3,:,:]**2)-np.sqrt(uv1000.u[4,:,:]**2 + uv1000.v[4,:,:]**2)
cisalhamento_1 = np.sqrt(niveis.u[5,3,:,:]**2 + niveis.v[5,3,:,:]**2)-np.sqrt(uv1000.u[5,:,:]**2 + uv1000.v[5,:,:]**2)
cisalhamento_2 = np.sqrt(niveis.u[6,3,:,:]**2 + niveis.v[6,3,:,:]**2)-np.sqrt(uv1000.u[6,:,:]**2 + uv1000.v[6,:,:]**2)
cisalhamento_3 = np.sqrt(niveis.u[7,3,:,:]**2 + niveis.v[7,3,:,:]**2)-np.sqrt(uv1000.u[7,:,:]**2 + uv1000.v[7,:,:]**2)

# Plotando a figura do Cisalhamento

matplotlib.rcParams.update({'font.size':22})
fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2.5)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=3, lonlines=3,
          latlim=(latN, latS), lonlim=(lonW, lonE))

##################################################################################
#CISALHAMENTO
ax[0].format(title='2021-12-24 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map1 = ax[0].contourf(cisalhamento.longitude, cisalhamento.latitude, cisalhamento.values,
                  cmap='BuGn', vmax=28, vmin=0, extend='both')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-24 06:00 UTC', abc=True, abcstyle='a)', abcsize=20 )
map2 = ax[1].contourf(cisalhamento_1.longitude, cisalhamento_1.latitude, cisalhamento_1,vmax=28, vmin=0,
                      cmap='BuGn',extend='both')
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-24 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[2].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[3].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map3,
                       loc='b', label='Cisalhamento do vento (500-1000 hPa) $ms^{-1}$',extend='both')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cisalhamento1.png', dpi=300)

#ESCOLHENDO OS DADOS
#cisalhamento
cisalhamento = np.sqrt(niveis.u[8,3,:,:]**2 + niveis.v[8,3,:,:]**2)-np.sqrt(uv1000.u[8,:,:]**2 + uv1000.v[8,:,:]**2)
cisalhamento_1 = np.sqrt(niveis.u[9,3,:,:]**2 + niveis.v[9,3,:,:]**2)-np.sqrt(uv1000.u[9,:,:]**2 + uv1000.v[9,:,:]**2)
cisalhamento_2 = np.sqrt(niveis.u[10,3,:,:]**2 + niveis.v[10,3,:,:]**2)-np.sqrt(uv1000.u[10,:,:]**2 + uv1000.v[10,:,:]**2)
cisalhamento_3 = np.sqrt(niveis.u[11,3,:,:]**2 + niveis.v[11,3,:,:]**2)-np.sqrt(uv1000.u[11,:,:]**2 + uv1000.v[11,:,:]**2)

# Plotando a figura do Cisalhamento

matplotlib.rcParams.update({'font.size':22})
fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2.5)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=3, lonlines=3,
          latlim=(latN, latS), lonlim=(lonW, lonE))

##################################################################################
#CISALHAMENTO
ax[0].format(title='2021-12-25 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map1 = ax[0].contourf(cisalhamento.longitude, cisalhamento.latitude, cisalhamento.values,
                  cmap='BuGn', vmax=28, vmin=0, extend='both')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-25 06:00 UTC', abc=True, abcstyle='a)', abcsize=20 )
map2 = ax[1].contourf(cisalhamento_1.longitude, cisalhamento_1.latitude, cisalhamento_1,vmax=28, vmin=0,
                      cmap='BuGn',extend='both')
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-25 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[2].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[3].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map3,
                       loc='b', label='Cisalhamento do vento (500-1000 hPa) $ms^{-1}$',extend='both')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cisalhamento2.png', dpi=300)

#ESCOLHENDO OS DADOS
#cisalhamento
cisalhamento = np.sqrt(niveis.u[12,3,:,:]**2 + niveis.v[12,3,:,:]**2)-np.sqrt(uv1000.u[12,:,:]**2 + uv1000.v[12,:,:]**2)
cisalhamento_1 = np.sqrt(niveis.u[13,3,:,:]**2 + niveis.v[13,3,:,:]**2)-np.sqrt(uv1000.u[13,:,:]**2 + uv1000.v[13,:,:]**2)
cisalhamento_2 = np.sqrt(niveis.u[14,3,:,:]**2 + niveis.v[14,3,:,:]**2)-np.sqrt(uv1000.u[14,:,:]**2 + uv1000.v[14,:,:]**2)
cisalhamento_3 = np.sqrt(niveis.u[15,3,:,:]**2 + niveis.v[15,3,:,:]**2)-np.sqrt(uv1000.u[15,:,:]**2 + uv1000.v[15,:,:]**2)

# Plotando a figura do Cisalhamento

matplotlib.rcParams.update({'font.size':22})
fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2.5)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=3, lonlines=3,
          latlim=(latN, latS), lonlim=(lonW, lonE))

##################################################################################
#CISALHAMENTO
ax[0].format(title='2021-12-26 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map1 = ax[0].contourf(cisalhamento.longitude, cisalhamento.latitude, cisalhamento.values,
                  cmap='BuGn', vmax=28, vmin=0, extend='both')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-26 06:00 UTC', abc=True, abcstyle='a)', abcsize=20 )
map2 = ax[1].contourf(cisalhamento_1.longitude, cisalhamento_1.latitude, cisalhamento_1,vmax=28, vmin=0,
                      cmap='BuGn',extend='both')
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-26 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[2].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
map3 = ax[3].contourf(cisalhamento_2.longitude, cisalhamento_2.latitude, cisalhamento_2,vmax=28, vmin=0,
                   cmap='BuGn',extend='both',)
# plota contornos dos Estados
evm_plot_by_state()

cbar3 = fig.colorbar(map3,
                       loc='b', label='Cisalhamento do vento (500-1000 hPa) $ms^{-1}$',extend='both')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cisalhamento3.png', dpi=300)

"""#**Plota escoamento e agua precipitavel**

"""

#agua precipitavel
aguaprec=superficie['tcwv']

#VENTO
vel = ((niveis.u[3,7,:,:]**2)+(niveis.v[3,7,:,:]**2))**0.5
vel2 = ((niveis.u[7,7,:,:]**2)+(niveis.v[7,7,:,:]**2))**0.5
vel3 = ((niveis.u[11,7,:,:]**2)+(niveis.v[11,7,:,:]**2))**0.5
vel4 = ((niveis.u[15,7,:,:]**2)+(niveis.v[15,7,:,:]**2))**0.5

u=niveis.u[3,7,:,:]
v=niveis.v[3,7,:,:]
u2=niveis.u[7,7,:,:]
v2=niveis.v[7,7,:,:]
u3=niveis.u[11,7,:,:]
v3=niveis.v[11,7,:,:]
u4=niveis.u[15,7,:,:]
v4=niveis.v[15,7,:,:]

# Plotando a figura de agua precipitavel + escoamento
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################

#FIGURA 1

ax[0].format(title='2021-12-23 18:00 UTC', abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])

#AGUA PRECIPITAVEL
map1 = ax[0].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[3,:,:],
                   cmap='navy', vmax=100, vmin=40, extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[0].streamplot(vel.longitude.values, vel.latitude.values, u.values, v.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------

#FIGURA 2
ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False])

#AGUA PRECIPITAVEL
map2 = ax[1].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[7,:,:],vmax=100, vmin=40,
                      cmap='navy',extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[1].streamplot(vel2.longitude.values, vel2.latitude.values, u2.values, v2.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------

#FIGURA 3
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[2].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[11,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[2].streamplot(vel3.longitude.values, vel3.latitude.values, u3.values, v3.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------

#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])

#AGUA PRECIPITAVEL
map3 = ax[3].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[15,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[3].streamplot(vel4.longitude.values, vel4.latitude.values, u4.values, v4.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#barra de cores shaded
cbar3 = fig.colorbar(map3,
                       loc='b', label='Água precipitável $Kgm^{-2}$ ')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/aguaprec.png', dpi=300)

#agua precipitavel
aguaprec=superficie['tcwv']

#VENTO
vel = ((niveis.u[0,7,:,:]**2)+(niveis.v[0,7,:,:]**2))**0.5
vel2 = ((niveis.u[1,7,:,:]**2)+(niveis.v[1,7,:,:]**2))**0.5
vel3 = ((niveis.u[2,7,:,:]**2)+(niveis.v[2,7,:,:]**2))**0.5
vel4 = ((niveis.u[3,7,:,:]**2)+(niveis.v[3,7,:,:]**2))**0.5

u=niveis.u[0,7,:,:]
v=niveis.v[0,7,:,:]
u2=niveis.u[1,7,:,:]
v2=niveis.v[1,7,:,:]
u3=niveis.u[2,7,:,:]
v3=niveis.v[2,7,:,:]
u4=niveis.u[3,7,:,:]
v4=niveis.v[3,7,:,:]

# Plotando a figura de agua precipitavel + escoamento
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################

#FIGURA 1

ax[0].format(title='2021-12-23 00:00 UTC', abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map1 = ax[0].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[0,:,:],
                   cmap='navy', vmax=100, vmin=40, extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[0].streamplot(vel.longitude.values, vel.latitude.values, u.values, v.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------

#FIGURA 2
ax[1].format(title='2021-12-23 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map2 = ax[1].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[1,:,:],vmax=100, vmin=40,
                      cmap='navy',extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[1].streamplot(vel2.longitude.values, vel2.latitude.values, u2.values, v2.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------

#FIGURA 3
ax[2].format(title='2021-12-23 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[2].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[2,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[2].streamplot(vel3.longitude.values, vel3.latitude.values, u3.values, v3.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------

#FIGURA 4
ax[3].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[3].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[4,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[3].streamplot(vel4.longitude.values, vel4.latitude.values, u4.values, v4.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#barra de cores shaded
cbar3 = fig.colorbar(map3,
                       loc='b', label='Água precipitável $Kgm^{-2}$ ')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/aguaprec.png', dpi=300)

#VENTO
vel = ((niveis.u[4,7,:,:]**2)+(niveis.v[4,7,:,:]**2))**0.5
vel2 = ((niveis.u[5,7,:,:]**2)+(niveis.v[5,7,:,:]**2))**0.5
vel3 = ((niveis.u[6,7,:,:]**2)+(niveis.v[6,7,:,:]**2))**0.5
vel4 = ((niveis.u[7,7,:,:]**2)+(niveis.v[7,7,:,:]**2))**0.5

u=niveis.u[4,7,:,:]
v=niveis.v[4,7,:,:]
u2=niveis.u[5,7,:,:]
v2=niveis.v[5,7,:,:]
u3=niveis.u[6,7,:,:]
v3=niveis.v[6,7,:,:]
u4=niveis.u[7,7,:,:]
v4=niveis.v[7,7,:,:]

# Plotando a figura de agua precipitavel + escoamento
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################

#FIGURA 1

ax[0].format(title='2021-12-24 00:00 UTC', abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map1 = ax[0].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[4,:,:],
                   cmap='navy', vmax=100, vmin=40, extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[0].streamplot(vel.longitude.values, vel.latitude.values, u.values, v.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------

#FIGURA 2
ax[1].format(title='2021-12-24 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map2 = ax[1].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[5,:,:],vmax=100, vmin=40,
                      cmap='navy',extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[1].streamplot(vel2.longitude.values, vel2.latitude.values, u2.values, v2.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------

#FIGURA 3
ax[2].format(title='2021-12-24 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[2].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[6,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[2].streamplot(vel3.longitude.values, vel3.latitude.values, u3.values, v3.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------

#FIGURA 4
ax[3].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[3].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[7,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[3].streamplot(vel4.longitude.values, vel4.latitude.values, u4.values, v4.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#barra de cores shaded
cbar3 = fig.colorbar(map3,
                       loc='b', label='Água precipitável $Kgm^{-2}$ ')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/aguaprec2.png', dpi=300)

#VENTO
vel = ((niveis.u[8,7,:,:]**2)+(niveis.v[8,7,:,:]**2))**0.5
vel2 = ((niveis.u[9,7,:,:]**2)+(niveis.v[9,7,:,:]**2))**0.5
vel3 = ((niveis.u[10,7,:,:]**2)+(niveis.v[10,7,:,:]**2))**0.5
vel4 = ((niveis.u[11,7,:,:]**2)+(niveis.v[11,7,:,:]**2))**0.5

u=niveis.u[8,7,:,:]
v=niveis.v[8,7,:,:]
u2=niveis.u[9,7,:,:]
v2=niveis.v[9,7,:,:]
u3=niveis.u[10,7,:,:]
v3=niveis.v[10,7,:,:]
u4=niveis.u[11,7,:,:]
v4=niveis.v[11,7,:,:]

# Plotando a figura de agua precipitavel + escoamento
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################

#FIGURA 1

ax[0].format(title='2021-12-25 00:00 UTC', abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map1 = ax[0].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[8,:,:],
                   cmap='navy', vmax=100, vmin=40, extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[0].streamplot(vel.longitude.values, vel.latitude.values, u.values, v.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------

#FIGURA 2
ax[1].format(title='2021-12-25 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map2 = ax[1].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[9,:,:],vmax=100, vmin=40,
                      cmap='navy',extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[1].streamplot(vel2.longitude.values, vel2.latitude.values, u2.values, v2.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------

#FIGURA 3
ax[2].format(title='2021-12-25 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[2].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[10,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[2].streamplot(vel3.longitude.values, vel3.latitude.values, u3.values, v3.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------

#FIGURA 4
ax[3].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[3].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[11,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[3].streamplot(vel4.longitude.values, vel4.latitude.values, u4.values, v4.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#barra de cores shaded
cbar3 = fig.colorbar(map3,
                       loc='b', label='Água precipitável $Kgm^{-2}$ ')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/aguaprec3.png', dpi=300)

#VENTO
vel = ((niveis.u[12,7,:,:]**2)+(niveis.v[12,7,:,:]**2))**0.5
vel2 = ((niveis.u[13,7,:,:]**2)+(niveis.v[13,7,:,:]**2))**0.5
vel3 = ((niveis.u[14,7,:,:]**2)+(niveis.v[14,7,:,:]**2))**0.5
vel4 = ((niveis.u[15,7,:,:]**2)+(niveis.v[15,7,:,:]**2))**0.5

u=niveis.u[12,7,:,:]
v=niveis.v[12,7,:,:]
u2=niveis.u[13,7,:,:]
v2=niveis.v[13,7,:,:]
u3=niveis.u[14,7,:,:]
v3=niveis.v[14,7,:,:]
u4=niveis.u[15,7,:,:]
v4=niveis.v[15,7,:,:]

# Plotando a figura de agua precipitavel + escoamento
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################

#FIGURA 1

ax[0].format(title='2021-12-26 00:00 UTC', abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map1 = ax[0].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[12,:,:],
                   cmap='navy', vmax=100, vmin=40, extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[0].streamplot(vel.longitude.values, vel.latitude.values, u.values, v.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()
#-------------------------------------------------------------------------------

#FIGURA 2
ax[1].format(title='2021-12-26 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map2 = ax[1].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[13,:,:],vmax=100, vmin=40,
                      cmap='navy',extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[1].streamplot(vel2.longitude.values, vel2.latitude.values, u2.values, v2.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())


# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------

#FIGURA 3
ax[2].format(title='2021-12-26 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[2].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[14,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[2].streamplot(vel3.longitude.values, vel3.latitude.values, u3.values, v3.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#-------------------------------------------------------------------------------

#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#AGUA PRECIPITAVEL
map3 = ax[3].contourf(aguaprec.longitude, aguaprec.latitude, aguaprec[15,:,:],vmax=100, vmin=40,
                   cmap='navy',extend='both',)

#LINHAS DE CORRENTE
img3 = ax[3].streamplot(vel4.longitude.values, vel4.latitude.values, u4.values, v4.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()


#barra de cores shaded
cbar3 = fig.colorbar(map3,
                       loc='b', label='Água precipitável $Kgm^{-2}$ ')


# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/aguaprec4.png', dpi=300)

"""#**PNMM + ESPESSURA + JATOS + DIVERGENCIA**

"""

#ESCOLHENDO OS DADOS
#VENTO
vel=((niveis.u[3,1,:,:]**2)+(niveis.v[3,1,:,:]**2))**0.5
vel2 = ((niveis.u[7,1,:,:]**2)+(niveis.v[7,1,:,:]**2))**0.5
vel3 = ((niveis.u[11,1,:,:]**2)+(niveis.v[11,1,:,:]**2))**0.5
vel4 = ((niveis.u[15,1,:,:]**2)+(niveis.v[15,1,:,:]**2))**0.5

#PRESSÃO
pnmm=superficie.msl[3,:,:]/100
pnmm2=superficie.msl[7,:,:]/100
pnmm3=superficie.msl[11,:,:]/100
pnmm4=superficie.msl[15,:,:]/100

#ESPESSURA
espessura= (((niveis.z[3,3,:,:])-(nivel.z[3,:,:]))/9.8)
espessura2= (((niveis.z[7,3,:,:])-(nivel.z[7,:,:]))/9.8)
espessura3= (((niveis.z[11,3,:,:])-(nivel.z[11,:,:]))/9.8)
espessura4= (((niveis.z[15,3,:,:])-(nivel.z[15,:,:]))/9.8)

#DIVERGENCIA
d = niveis.d[3,1,:,:]
d = d*10000
d=smooth2d(d,5,cenweight=4)
d1 = niveis.d[7,1,:,:]
d1 = d1*10000
d1 =smooth2d(d1,5,cenweight=4)
d2 = niveis.d[11,1,:,:]
d2 = d2*10000
d2 =smooth2d(d2,5,cenweight=4)
d3 = niveis.d[15,1,:,:]
d3 = d2*10000
d3 =smooth2d(d2,5,cenweight=4)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = proplot.subplots(nrows=2, ncols=2, figsize=(12, 12), tight=True, proj='pcarree')
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################
#FIGURA 1
ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=28, labels = [True, False, False, False] )

#JATOS EM 250
map1 = ax[0].contourf(vel.longitude, vel.latitude, vel.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#LINHAS DE CORRENTE
colors = ["#e7f2f4", "#ceeaee", "#b6e2e8", "#abdcff", "#a4d685", "#9cd04e",
          "#abcf2a", "#c9d21b", "#e8d50c", "#ffd100", "#ffba00", "#ffa200"]
cmap = matplotlib.colors.ListedColormap(colors)
cmap.set_over('#ff8c00')
cmap.set_under('#fffafa')
img3 = ax[0].streamplot(vel.longitude.values, vel.latitude.values, u.values, v.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

################################################################################
#FIGURA 2
ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=28, labels = [False, False, False, False])

#JATOS EM 250
map1 = ax[1].contourf(vel2.longitude, vel2.latitude, vel2.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#linhas de corrente
img3 = ax[1].streamplot(vel2.longitude.values, vel2.latitude.values, u2.values, v2.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

################################################################################
#FIGURA 3
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=28)
#JATOS EM 250
map2 = ax[2].contourf(vel3.longitude, vel3.latitude, vel3.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#linhas de corrente
img3 = ax[2].streamplot(vel3.longitude.values, vel3.latitude.values, u3.values, v3.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

################################################################################
#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=28, labels = [False, False, True, False])
#JATOS EM 250
map2 = ax[3].contourf(vel4.longitude, vel4.latitude, vel4.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#linhas de corrente
img3 = ax[3].streamplot(vel4.longitude.values, vel4.latitude.values, u4.values, v4.values, density=[2, 2], linewidth=1, color='gray', transform=ccrs.PlateCarree())

# plota contornos dos Estados
evm_plot_by_state()

#barra de cores shaded
cbar3 = fig.colorbar(map2, pad=2, loc='b', label='Jatos 250 hPa ($m s^{-1}$)')
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/jatos_linhas.png', dpi=300)

#fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/jatoss.png', dpi=300)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = proplot.subplots(nrows=2,ncols=2, figsize=(12,12), proj='pcarree', hspace = 2.5)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################
#FIGURA 1

#ESPESSURA
# Define de contour interval
data_min = 5200
data_max = 5900
interval = 50
levels = np.arange(data_min,data_max,interval)

ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])
img2 = ax[0].contourf(espessura.longitude, espessura.latitude, espessura.values, cmap='gist_heat_r', extend='both',levels=levels)
ax[0].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 2
ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False])
img2 = ax[1].contourf(espessura3.longitude, espessura3.latitude, espessura3.values, cmap='gist_heat_r',extend='both', levels=levels)
ax[1].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 3
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img2 = ax[2].contourf(espessura2.longitude, espessura2.latitude, espessura2.values, cmap='gist_heat_r', extend='both',levels=levels)
ax[2].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])
img2 = ax[3].contourf(espessura4.longitude, espessura4.latitude, espessura4.values, cmap='gist_heat_r',extend='both', levels=levels)
ax[3].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')


# plota contornos dos Estados
evm_plot_by_state()

#barra de cores shaded
cbar3 = fig.colorbar(img2, pad=2, loc='b', label='Espessura 500-1000 hPa')

fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/espessura_colorida.png', dpi=300)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree')
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################
#FIGURA 1

#DIVERGENCIA
# Define the countour interval
min = 1
max = 4
intervalo = 0.5
niveis = np.arange(min, max, intervalo)

#plot the contours
ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])
img3 = ax[0].contour(superficie.longitude, superficie.latitude, d, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='b')

#-------------------------------------------------------------------------------
#FIGURA 2
ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False])
img3 = ax[1].contour(superficie.longitude, superficie.latitude, d1, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[1].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f',colors='b')

#-------------------------------------------------------------------------------
#FIGURA 3
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img3 = ax[2].contour(superficie.longitude, superficie.latitude, d2, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[2].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

#-------------------------------------------------------------------------------
#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])
img3 = ax[3].contour(superficie.longitude, superficie.latitude, d3, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[3].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()


fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/divergencia.png', dpi=300)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=3,ncols=4, figsize=(24,24), tight=True, proj='pcarree',hspace=-6)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################
#FIGURA 1
ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[0].contourf(vel.longitude, vel.latitude, vel.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')
#PNMM
img1=ax[0].contour(pnmm.longitude, pnmm.latitude, pnmm, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[0].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#-----------------------------------------------------------------------------------------
#FIGURA 2
ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
#JATOS EM 250
map1 = ax[1].contourf(vel2.longitude, vel2.latitude, vel2.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')
#PNMM
img1=ax[1].contour(pnmm2.longitude, pnmm2.latitude, pnmm2, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[1].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#-----------------------------------------------------------------------------------------
#FIGURA 3
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
#JATOS EM 250
map2 = ax[2].contourf(vel3.longitude, vel3.latitude, vel3.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')
#PNMM
img1=ax[2].contour(pnmm3.longitude, pnmm3.latitude, pnmm3, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[2].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#-----------------------------------------------------------------------------------------
#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
#JATOS EM 250
map2 = ax[3].contourf(vel4.longitude, vel4.latitude, vel4.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')
#PNMM
img1=ax[3].contour(pnmm4.longitude, pnmm4.latitude, pnmm4, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[3].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 5

#ESPESSURA
# Define de contour interval
data_min = 4900
data_max = 5900
interval = 50
levels = np.arange(data_min,data_max,interval)

ax[4].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img2 = ax[4].contour(espessura.longitude, espessura.latitude, espessura.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[4].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 6
ax[5].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img2 = ax[5].contour(espessura3.longitude, espessura3.latitude, espessura3.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[5].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 7
ax[6].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img2 = ax[6].contour(espessura2.longitude, espessura2.latitude, espessura2.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[6].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 8
ax[7].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img2 = ax[7].contour(espessura4.longitude, espessura4.latitude, espessura4.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[7].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')


# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 9

#DIVERGENCIA
# Define the countour interval
min = 1
max = 4
intervalo = 0.5
niveis = np.arange(min, max, intervalo)

#plot the contours
ax[8].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img3 = ax[8].contour(superficie.longitude, superficie.latitude, d, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[8].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='b')

#-------------------------------------------------------------------------------
#FIGURA 10
ax[9].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img3 = ax[9].contour(superficie.longitude, superficie.latitude, d1, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[9].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f',colors='b')

#-------------------------------------------------------------------------------
#FIGURA 11
ax[10].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img3 = ax[10].contour(superficie.longitude, superficie.latitude, d2, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[10].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

#-------------------------------------------------------------------------------
#FIGURA 12
ax[11].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img3 = ax[11].contour(superficie.longitude, superficie.latitude, d3, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[11].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#barra de cores shaded
cbar3 = fig.colorbar(map2, pad=2, loc='b', label='Jatos 250 hPa ($m s^{-1}$)')
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/jatos.png', dpi=300)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree')
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################
#FIGURA 1
ax[0].format(title='2021-12-23 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[0].contourf(vel.longitude, vel.latitude, vel.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[0].contour(pnmm.longitude, pnmm.latitude, pnmm, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[0].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Define de contour interval
data_min = 4900
data_max = 5900
interval = 50
levels = np.arange(data_min,data_max,interval)

# Plot the contours
img2 = ax[0].contour(espessura.longitude, espessura.latitude, espessura.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[0].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
# Define the countour interval
min = 1
max = 4
intervalo = 0.5
niveis = np.arange(min, max, intervalo)

#plot the contours
img3 = ax[0].contour(superficie.longitude, superficie.latitude, d, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='b')


# plota contornos dos Estados
evm_plot_by_state()

#-----------------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-23 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[1].contourf(vel2.longitude, vel2.latitude, vel2.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[1].contour(pnmm2.longitude, pnmm2.latitude, pnmm2, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[1].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[1].contour(espessura2.longitude, espessura2.latitude, espessura2.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[1].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[1].contour(superficie.longitude, superficie.latitude, d1, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[1].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f',colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-23 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[2].contourf(vel3.longitude, vel3.latitude, vel3.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[2].contour(pnmm3.longitude, pnmm3.latitude, pnmm3, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[2].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[2].contour(espessura3.longitude, espessura3.latitude, espessura3.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[2].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[2].contour(superficie.longitude, superficie.latitude, d2, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[2].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[3].contourf(vel4.longitude, vel4.latitude, vel4.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[3].contour(pnmm4.longitude, pnmm4.latitude, pnmm4, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[3].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[3].contour(espessura4.longitude, espessura4.latitude, espessura4.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[3].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[3].contour(superficie.longitude, superficie.latitude, d3, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[3].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#barra de cores shaded
cbar3 = fig.colorbar(map2, pad=2, loc='b', label='Jatos 250 hPa ($m s^{-1}$)')
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/jatos1.png', dpi=300)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################
#FIGURA 1
ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[0].contourf(vel.longitude, vel.latitude, vel.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[0].contour(pnmm.longitude, pnmm.latitude, pnmm, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[0].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Define de contour interval
data_min = 4900
data_max = 5900
interval = 50
levels = np.arange(data_min,data_max,interval)

# Plot the contours
img2 = ax[0].contour(espessura.longitude, espessura.latitude, espessura.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[0].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
# Define the countour interval
min = 1
max = 4
intervalo = 0.5
niveis = np.arange(min, max, intervalo)

#plot the contours
img3 = ax[0].contour(superficie.longitude, superficie.latitude, d, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='b')


# plota contornos dos Estados
evm_plot_by_state()

#-----------------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[1].contourf(vel2.longitude, vel2.latitude, vel2.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[1].contour(pnmm2.longitude, pnmm2.latitude, pnmm2, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[1].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[1].contour(espessura2.longitude, espessura2.latitude, espessura2.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[1].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[1].contour(superficie.longitude, superficie.latitude, d1, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[1].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f',colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[2].contourf(vel3.longitude, vel3.latitude, vel3.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[2].contour(pnmm3.longitude, pnmm3.latitude, pnmm3, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[2].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[2].contour(espessura3.longitude, espessura3.latitude, espessura3.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[2].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[2].contour(superficie.longitude, superficie.latitude, d2, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[2].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[3].contourf(vel4.longitude, vel4.latitude, vel4.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[3].contour(pnmm4.longitude, pnmm4.latitude, pnmm4, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[3].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[3].contour(espessura4.longitude, espessura4.latitude, espessura4.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[3].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[3].contour(superficie.longitude, superficie.latitude, d3, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[3].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#barra de cores shaded
cbar3 = fig.colorbar(map2, pad=2, loc='b', label='Jatos 250 hPa ($m s^{-1}$)')
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/jatos.png', dpi=300)

#ESCOLHENDO OS DADOS
#VENTO
vel=((niveis.u[0,1,:,:]**2)+(niveis.v[0,1,:,:]**2))**0.5
vel2 = ((niveis.u[1,1,:,:]**2)+(niveis.v[1,1,:,:]**2))**0.5
vel3 = ((niveis.u[2,1,:,:]**2)+(niveis.v[2,1,:,:]**2))**0.5
vel4 = ((niveis.u[3,1,:,:]**2)+(niveis.v[3,1,:,:]**2))**0.5

#PRESSÃO
pnmm=superficie.msl[0,:,:]/100
pnmm2=superficie.msl[1,:,:]/100
pnmm3=superficie.msl[2,:,:]/100
pnmm4=superficie.msl[3,:,:]/100

#ESPESSURA
espessura= (((niveis.z[0,3,:,:])-(nivel.z[0,:,:]))/9.8)
espessura2= (((niveis.z[1,3,:,:])-(nivel.z[1,:,:]))/9.8)
espessura3= (((niveis.z[2,3,:,:])-(nivel.z[2,:,:]))/9.8)
espessura4= (((niveis.z[3,3,:,:])-(nivel.z[3,:,:]))/9.8)

#DIVERGENCIA
d = niveis.d[0,1,:,:]
d = d*10000
d=smooth2d(d,5,cenweight=4)
d1 = niveis.d[1,1,:,:]
d1 = d1*10000
d1 =smooth2d(d1,5,cenweight=4)
d2 = niveis.d[2,1,:,:]
d2 = d2*10000
d2 =smooth2d(d2,5,cenweight=4)
d3 = niveis.d[2,1,:,:]
d3 = d2*10000
d3 =smooth2d(d2,5,cenweight=4)

#ESCOLHENDO OS DADOS
#VENTO
vel=((niveis.u[4,1,:,:]**2)+(niveis.v[4,1,:,:]**2))**0.5
vel2 = ((niveis.u[5,1,:,:]**2)+(niveis.v[5,1,:,:]**2))**0.5
vel3 = ((niveis.u[6,1,:,:]**2)+(niveis.v[6,1,:,:]**2))**0.5
vel4 = ((niveis.u[7,1,:,:]**2)+(niveis.v[7,1,:,:]**2))**0.5

#PRESSÃO
pnmm=superficie.msl[4,:,:]/100
pnmm2=superficie.msl[5,:,:]/100
pnmm3=superficie.msl[6,:,:]/100
pnmm4=superficie.msl[7,:,:]/100

#ESPESSURA
espessura= (((niveis.z[4,3,:,:])-(nivel.z[4,:,:]))/9.8)
espessura2= (((niveis.z[5,3,:,:])-(nivel.z[5,:,:]))/9.8)
espessura3= (((niveis.z[6,3,:,:])-(nivel.z[6,:,:]))/9.8)
espessura4= (((niveis.z[7,3,:,:])-(nivel.z[7,:,:]))/9.8)

#DIVERGENCIA
d = niveis.d[4,1,:,:]
d = d*10000
d=smooth2d(d,5,cenweight=4)
d1 = niveis.d[5,1,:,:]
d1 = d1*10000
d1 =smooth2d(d1,5,cenweight=4)
d2 = niveis.d[6,1,:,:]
d2 = d2*10000
d2 =smooth2d(d2,5,cenweight=4)
d3 = niveis.d[7,1,:,:]
d3 = d2*10000
d3 =smooth2d(d2,5,cenweight=4)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################
#FIGURA 1
ax[0].format(title='2021-12-24 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[0].contourf(vel.longitude, vel.latitude, vel.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[0].contour(pnmm.longitude, pnmm.latitude, pnmm, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[0].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Define de contour interval
data_min = 4900
data_max = 5900
interval = 50
levels = np.arange(data_min,data_max,interval)

# Plot the contours
img2 = ax[0].contour(espessura.longitude, espessura.latitude, espessura.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[0].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
# Define the countour interval
min = 1
max = 4
intervalo = 0.5
niveis = np.arange(min, max, intervalo)

#plot the contours
img3 = ax[0].contour(superficie.longitude, superficie.latitude, d, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='b')


# plota contornos dos Estados
evm_plot_by_state()

#-----------------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-24 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[1].contourf(vel2.longitude, vel2.latitude, vel2.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[1].contour(pnmm2.longitude, pnmm2.latitude, pnmm2, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[1].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[1].contour(espessura2.longitude, espessura2.latitude, espessura2.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[1].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[1].contour(superficie.longitude, superficie.latitude, d1, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[1].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f',colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-24 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[2].contourf(vel3.longitude, vel3.latitude, vel3.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[2].contour(pnmm3.longitude, pnmm3.latitude, pnmm3, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[2].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[2].contour(espessura3.longitude, espessura3.latitude, espessura3.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[2].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[2].contour(superficie.longitude, superficie.latitude, d2, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[2].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[3].contourf(vel4.longitude, vel4.latitude, vel4.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[3].contour(pnmm4.longitude, pnmm4.latitude, pnmm4, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[3].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[3].contour(espessura4.longitude, espessura4.latitude, espessura4.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[3].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[3].contour(superficie.longitude, superficie.latitude, d3, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[3].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#barra de cores shaded
cbar3 = fig.colorbar(map2, pad=2, loc='b', label='Jatos 250 hPa ($m s^{-1}$)')
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/jatos2.png', dpi=300)

#ESCOLHENDO OS DADOS
#VENTO
vel=((niveis.u[8,1,:,:]**2)+(niveis.v[8,1,:,:]**2))**0.5
vel2 = ((niveis.u[9,1,:,:]**2)+(niveis.v[9,1,:,:]**2))**0.5
vel3 = ((niveis.u[10,1,:,:]**2)+(niveis.v[10,1,:,:]**2))**0.5
vel4 = ((niveis.u[11,1,:,:]**2)+(niveis.v[11,1,:,:]**2))**0.5

#PRESSÃO
pnmm=superficie.msl[8,:,:]/100
pnmm2=superficie.msl[9,:,:]/100
pnmm3=superficie.msl[10,:,:]/100
pnmm4=superficie.msl[11,:,:]/100

#ESPESSURA
espessura= (((niveis.z[8,3,:,:])-(nivel.z[8,:,:]))/9.8)
espessura2= (((niveis.z[9,3,:,:])-(nivel.z[9,:,:]))/9.8)
espessura3= (((niveis.z[10,3,:,:])-(nivel.z[10,:,:]))/9.8)
espessura4= (((niveis.z[11,3,:,:])-(nivel.z[11,:,:]))/9.8)

#DIVERGENCIA
d = niveis.d[8,1,:,:]
d = d*10000
d=smooth2d(d,5,cenweight=4)
d1 = niveis.d[9,1,:,:]
d1 = d1*10000
d1 =smooth2d(d1,5,cenweight=4)
d2 = niveis.d[10,1,:,:]
d2 = d2*10000
d2 =smooth2d(d2,5,cenweight=4)
d3 = niveis.d[11,1,:,:]
d3 = d2*10000
d3 =smooth2d(d2,5,cenweight=4)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################
#FIGURA 1
ax[0].format(title='2021-12-25 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[0].contourf(vel.longitude, vel.latitude, vel.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[0].contour(pnmm.longitude, pnmm.latitude, pnmm, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[0].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Define de contour interval
data_min = 4900
data_max = 5900
interval = 50
levels = np.arange(data_min,data_max,interval)

# Plot the contours
img2 = ax[0].contour(espessura.longitude, espessura.latitude, espessura.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[0].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
# Define the countour interval
min = 1
max = 4
intervalo = 0.5
niveis = np.arange(min, max, intervalo)

#plot the contours
img3 = ax[0].contour(superficie.longitude, superficie.latitude, d, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='b')


# plota contornos dos Estados
evm_plot_by_state()

#-----------------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-25 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[1].contourf(vel2.longitude, vel2.latitude, vel2.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[1].contour(pnmm2.longitude, pnmm2.latitude, pnmm2, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[1].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[1].contour(espessura2.longitude, espessura2.latitude, espessura2.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[1].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[1].contour(superficie.longitude, superficie.latitude, d1, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[1].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f',colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-25 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[2].contourf(vel3.longitude, vel3.latitude, vel3.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[2].contour(pnmm3.longitude, pnmm3.latitude, pnmm3, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[2].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[2].contour(espessura3.longitude, espessura3.latitude, espessura3.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[2].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[2].contour(superficie.longitude, superficie.latitude, d2, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[2].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[3].contourf(vel4.longitude, vel4.latitude, vel4.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[3].contour(pnmm4.longitude, pnmm4.latitude, pnmm4, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[3].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[3].contour(espessura4.longitude, espessura4.latitude, espessura4.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[3].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[3].contour(superficie.longitude, superficie.latitude, d3, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[3].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#barra de cores shaded
cbar3 = fig.colorbar(map2, pad=2, loc='b', label='Jatos 250 hPa ($m s^{-1}$)')
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/jatos3.png', dpi=300)

#ESCOLHENDO OS DADOS
#VENTO
vel=((niveis.u[12,1,:,:]**2)+(niveis.v[12,1,:,:]**2))**0.5
vel2 = ((niveis.u[13,1,:,:]**2)+(niveis.v[13,1,:,:]**2))**0.5
vel3 = ((niveis.u[14,1,:,:]**2)+(niveis.v[14,1,:,:]**2))**0.5
vel4 = ((niveis.u[15,1,:,:]**2)+(niveis.v[15,1,:,:]**2))**0.5

#PRESSÃO
pnmm=superficie.msl[12,:,:]/100
pnmm2=superficie.msl[13,:,:]/100
pnmm3=superficie.msl[14,:,:]/100
pnmm4=superficie.msl[15,:,:]/100

#ESPESSURA
espessura= (((niveis.z[12,3,:,:])-(nivel.z[12,:,:]))/9.8)
espessura2= (((niveis.z[13,3,:,:])-(nivel.z[13,:,:]))/9.8)
espessura3= (((niveis.z[14,3,:,:])-(nivel.z[14,:,:]))/9.8)
espessura4= (((niveis.z[15,3,:,:])-(nivel.z[15,:,:]))/9.8)

#DIVERGENCIA
d = niveis.d[12,1,:,:]
d = d*10000
d=smooth2d(d,5,cenweight=4)
d1 = niveis.d[13,1,:,:]
d1 = d1*10000
d1 =smooth2d(d1,5,cenweight=4)
d2 = niveis.d[14,1,:,:]
d2 = d2*10000
d2 =smooth2d(d2,5,cenweight=4)
d3 = niveis.d[15,1,:,:]
d3 = d2*10000
d3 =smooth2d(d2,5,cenweight=4)

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-2)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))


################################################################################
#FIGURA 1
ax[0].format(title='2021-12-26 00:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[0].contourf(vel.longitude, vel.latitude, vel.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[0].contour(pnmm.longitude, pnmm.latitude, pnmm, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[0].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Define de contour interval
data_min = 4900
data_max = 5900
interval = 50
levels = np.arange(data_min,data_max,interval)

# Plot the contours
img2 = ax[0].contour(espessura.longitude, espessura.latitude, espessura.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[0].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
# Define the countour interval
min = 1
max = 4
intervalo = 0.5
niveis = np.arange(min, max, intervalo)

#plot the contours
img3 = ax[0].contour(superficie.longitude, superficie.latitude, d, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[0].clabel(img3, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f', colors='b')


# plota contornos dos Estados
evm_plot_by_state()

#-----------------------------------------------------------------------------------------
#FIGURA 2

ax[1].format(title='2021-12-26 06:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map1 = ax[1].contourf(vel2.longitude, vel2.latitude, vel2.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[1].contour(pnmm2.longitude, pnmm2.latitude, pnmm2, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[1].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[1].contour(espessura2.longitude, espessura2.latitude, espessura2.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[1].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[1].contour(superficie.longitude, superficie.latitude, d1, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[1].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f',colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 3

ax[2].format(title='2021-12-26 12:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[2].contourf(vel3.longitude, vel3.latitude, vel3.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[2].contour(pnmm3.longitude, pnmm3.latitude, pnmm3, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[2].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[2].contour(espessura3.longitude, espessura3.latitude, espessura3.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[2].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[2].contour(superficie.longitude, superficie.latitude, d2, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[2].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#FIGURA 4

ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)

#JATOS EM 250
map2 = ax[3].contourf(vel4.longitude, vel4.latitude, vel4.values,
                  cmap='fire', vmax=100, vmin=40, extend='both')

#PNMM
img1=ax[3].contour(pnmm4.longitude, pnmm4.latitude, pnmm4, colors='gray', linewidths=1, transform=ccrs.PlateCarree())
ax[3].clabel(img1, inline=1, inline_spacing=1, fontsize='10',fmt = '%1.0f', colors= 'gray')

#ESPESSURA
# Plot the contours
img2 = ax[3].contour(espessura4.longitude, espessura4.latitude, espessura4.values, cmap='seismic', linestyles='dashed', linewidths=1.0, levels=levels)
ax[3].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#DIVERGENCIA
#plot the contours
img3 = ax[3].contour(superficie.longitude, superficie.latitude, d3, colors='b', linestyles='solid', linewidths=1.0, levels=niveis)
ax[3].clabel(img3, inline=1, inline_spacing=2, fontsize='10',fmt = '%1.0f', colors='b')

# plota contornos dos Estados
evm_plot_by_state()

#-------------------------------------------------------------------------------
#barra de cores shaded
cbar3 = fig.colorbar(map2, pad=2, loc='b', label='Jatos 250 hPa ($m s^{-1}$)')
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/jatos4.png', dpi=300)

"""#**Plota o CAPE**"""

# Plotando a figura do CAPE
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-3)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

#####################################################################################

ax[0].format(title='2021-12-23 18:00 UTC',abc=1, abcstyle = 'a)',  abcsize=20, labels = [True, False, False, False])

map1 = ax[0].contourf(superficie.longitude, superficie.latitude, superficie.cape[3,:,:],
                   cmap='OrRd', vmax=4500, vmin=400, extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[0].coastlines('10m')

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-24 18:00 UTC',abc = 1, abcstyle = 'a)',  abcsize=20, labels = [False, False, False, False])

map2 = ax[1].contourf(superficie.longitude, superficie.latitude, superficie.cape[7,:,:],vmax=4500, vmin=400,
                      cmap='OrRd',extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[1].coastlines('10m')

#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-25 18:00 UTC',abc = 1, abcstyle = 'a)', abcsize=20,)

map3 = ax[2].contourf(superficie.longitude, superficie.latitude, superficie['cape'][11,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[2].coastlines('10m')

#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-26 18:00 UTC',abc = 1, abcstyle = 'a)',  abcsize=20, labels = [False, False, True, False])

map3 = ax[3].contourf(superficie.longitude, superficie.latitude, superficie['cape'][15,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()
cbar3 = fig.colorbar(map3,
                       loc='b', label='CAPE ($J.Kg^{-1}$)',)

#plota contorno da linha costeira
ax[3].coastlines('10m')

# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cape.png', dpi=300)

ab# Plotando a figura do CAPE
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-3)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

ax[0].format(title='2021-12-23 00:00 UTC',abc=1)

map1 = ax[0].contourf(superficie.longitude, superficie.latitude, superficie.cape[0,:,:],
                   cmap='OrRd', vmax=4500, vmin=400, extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[0].coastlines('10m')

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-23 06:00 UTC',abc = 1)

map2 = ax[1].contourf(superficie.longitude, superficie.latitude, superficie.cape[1,:,:],vmax=4500, vmin=400,
                      cmap='OrRd',extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[1].coastlines('10m')

#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-23 12:00 UTC',abc = 1)

map3 = ax[2].contourf(superficie.longitude, superficie.latitude, superficie['cape'][2,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[2].coastlines('10m')

#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-23 18:00 UTC',abc = 1)

map3 = ax[3].contourf(superficie.longitude, superficie.latitude, superficie['cape'][3,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()
cbar3 = fig.colorbar(map3,
                       loc='b', label='CAPE ($J.Kg^{-1}$)',)

#plota contorno da linha costeira
ax[3].coastlines('10m')

# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cape1.png', dpi=300)

# Plotando a figura do CAPE
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-3)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

ax[0].format(title='2021-12-24 00:00 UTC',abc=1)

map1 = ax[0].contourf(superficie.longitude, superficie.latitude, superficie.cape[4,:,:],
                   cmap='OrRd', vmax=4500, vmin=400, extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[0].coastlines('10m')

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-24 06:00 UTC',abc = 1)

map2 = ax[1].contourf(superficie.longitude, superficie.latitude, superficie.cape[5,:,:],vmax=4500, vmin=400,
                      cmap='OrRd',extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[1].coastlines('10m')

#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-24 12:00 UTC',abc = 1)

map3 = ax[2].contourf(superficie.longitude, superficie.latitude, superficie['cape'][6,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[2].coastlines('10m')

#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-24 18:00 UTC',abc = 1)

map3 = ax[3].contourf(superficie.longitude, superficie.latitude, superficie['cape'][7,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()
cbar3 = fig.colorbar(map3,
                       loc='b', label='CAPE ($J.Kg^{-1}$)',)

#plota contorno da linha costeira
ax[3].coastlines('10m')

# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cape2.png', dpi=300)

# Plotando a figura do CAPE
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-3)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

ax[0].format(title='2021-12-25 00:00 UTC',abc=1)

map1 = ax[0].contourf(superficie.longitude, superficie.latitude, superficie.cape[8,:,:],
                   cmap='OrRd', vmax=4500, vmin=400, extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[0].coastlines('10m')

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-25 06:00 UTC',abc = 1)

map2 = ax[1].contourf(superficie.longitude, superficie.latitude, superficie.cape[9,:,:],vmax=4500, vmin=400,
                      cmap='OrRd',extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[1].coastlines('10m')

#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-25 12:00 UTC',abc = 1)

map3 = ax[2].contourf(superficie.longitude, superficie.latitude, superficie['cape'][10,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[2].coastlines('10m')

#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-25 18:00 UTC',abc = 1)

map3 = ax[3].contourf(superficie.longitude, superficie.latitude, superficie['cape'][11,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()
cbar3 = fig.colorbar(map3,
                       loc='b', label='CAPE ($J.Kg^{-1}$)',)

#plota contorno da linha costeira
ax[3].coastlines('10m')

# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cape3.png', dpi=300)

# Plotando a figura do CAPE
matplotlib.rcParams.update({'font.size':22})

fig, ax = plot.subplots(nrows=2,ncols=2, figsize=(12,12), tight=True, proj='pcarree',hspace=-3)

ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

ax[0].format(title='2021-12-26 00:00 UTC',abc=1)

map1 = ax[0].contourf(superficie.longitude, superficie.latitude, superficie.cape[12,:,:],
                   cmap='OrRd', vmax=4500, vmin=400, extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[0].coastlines('10m')

#-------------------------------------------------------------------------------
ax[1].format(title='2021-12-26 06:00 UTC',abc = 1)

map2 = ax[1].contourf(superficie.longitude, superficie.latitude, superficie.cape[13,:,:],vmax=4500, vmin=400,
                      cmap='OrRd',extend='both')
# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[1].coastlines('10m')

#-------------------------------------------------------------------------------
ax[2].format(title='2021-12-26 12:00 UTC',abc = 1)

map3 = ax[2].contourf(superficie.longitude, superficie.latitude, superficie['cape'][14,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()

#plota contorno da linha costeira
ax[2].coastlines('10m')

#-------------------------------------------------------------------------------
ax[3].format(title='2021-12-26 18:00 UTC',abc = 1)

map3 = ax[3].contourf(superficie.longitude, superficie.latitude, superficie['cape'][15,:,:],vmax=4500, vmin=400,
                   cmap='OrRd',extend='both',)

# plota contornos dos Estados
evm_plot_by_state()
cbar3 = fig.colorbar(map3,
                       loc='b', label='CAPE ($J.Kg^{-1}$)',)

#plota contorno da linha costeira
ax[3].coastlines('10m')

# exibe a figura na tela
plot.show()
fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/cape4.png', dpi=300)



"""antigo

"""

from proplot.internals.rcsetup import LINEWIDTH
# Plotando a figura de pnmm+jatos+espessura
matplotlib.rcParams.update({'font.size':22})

fig, ax = proplot.subplots(nrows=2,ncols=2, figsize=(12,12), proj='pcarree', hspace = 2.5)
ax.format(coast=False, borders=True, innerborders=False, labels=True, latlines=5, lonlines=5,
          latlim=(latN, latS), lonlim=(lonW, lonE))

################################################################################
#FIGURA 1

#ESPESSURA
# Define de contour interval
data_min = 4900
data_max = 5900
interval = 50
levels = np.arange(data_min,data_max,interval)

ax[0].format(title='2021-12-23 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [True, False, False, False])
img2 = ax[0].contourf(espessura.longitude, espessura.latitude, espessura.values, cmap='Blue_r', linestyles='dashed', linewidths=1.0, levels=levels)
ax[0].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 2
ax[1].format(title='2021-12-24 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, False, False])
img2 = ax[1].contourf(espessura3.longitude, espessura3.latitude, espessura3.values, cmap='Blue_r', linestyles='dashed', linewidths=1.0, levels=levels)
ax[1].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 3
ax[2].format(title='2021-12-25 18:00 UTC',abc=True, abcstyle='a)', abcsize=20)
img2 = ax[2].contourf(espessura2.longitude, espessura2.latitude, espessura2.values, cmap='Blue_r', linestyles='dashed', linewidths=1.0, levels=levels)
ax[2].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')

#-------------------------------------------------------------------------------
#FIGURA 4
ax[3].format(title='2021-12-26 18:00 UTC',abc=True, abcstyle='a)', abcsize=20, labels = [False, False, True, False])
img2 = ax[3].contourf(espessura4.longitude, espessura4.latitude, espessura4.values, cmap='Blue_r', linestyles='dashed', linewidths=1.0, levels=levels)
ax[3].clabel(img2, inline=1, inline_spacing=0, fontsize='10',fmt = '%1.0f')


# plota contornos dos Estados
evm_plot_by_state()


#fig.savefig('/content/drive/MyDrive/mestrado/Dados/Figuras/sinótica/espessura.png', dpi=300)
